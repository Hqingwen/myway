#include "Bhead.h"


//顺序栈。动态存储，栈大小可以改变。
/**************************************************************/
typedef struct
{
	//静态存储，栈大小固定。
/**************************************************************
	int data[maxSize];
	int top;
**************************************************************/
	//动态存储，栈大小可以改变。
	int *base;
	int *top;
	int stackSize;		//顺序栈现存大小
}SqStack;
/**************************************************************/

//创建顺序栈。空栈。
/**************************************************************/
int InitStack(SqStack &S)
{
	S.base = (int *)malloc(maxSize * sizeof(int));
	if(!S.base)
		return ERROR;
	S.top = S.base;
	S.stackSize = maxSize;
	return OK;
}
/**************************************************************/

//销毁顺序栈
/**************************************************************/
int DestroyStack(SqStack &S)
{
	return OK;
}
/**************************************************************/

//判空。
/**************************************************************/
int isEmpty(SqStack S)
{
	if(S.top == S.base)
		return TRUE;
	else
		return FALSE;
}
/**************************************************************/

//进栈
/**************************************************************/
int Push(SqStack &S, int e)
{
	if(S.top-S.base >= S.stackSize)		//栈满
	{
		S.base = (int *)realloc(S.base,
			(S.stackSize + addSize)*sizeof(int));
		if(!S.base)
			return ERROR;
		S.top = S.base + S.stackSize;
		S.stackSize += addSize;
	}
	*S.top++ = e;
	return OK;
}
/**************************************************************/

//出栈
/**************************************************************/
int Pop(SqStack &S)
{
	if(isEmpty(S))
		return ERROR;
	--S.top;
	return OK;
}
/**************************************************************/

//取栈顶元素值
/**************************************************************/
int GetTop(SqStack S, int &e)
{
	if(S.top == S.base)
		return INFEASIBLE;
	e = *(S.top-1);
	return OK;
}
/**************************************************************/

//遍历
/**************************************************************/
void Treaversal(SqStack S)
{
	if(isEmpty(S))
		cout<<"空！"<<endl;
	int * r = S.top-1;
	while(r>=S.base){
		cout<<*r<<"  ";
		--r;
	}
	cout<<endl<<endl;
}
/**************************************************************/
