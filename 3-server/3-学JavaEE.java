
Q：有2台服务的时候，syschronize能不能保证同步？
不能，因为是不同的JVM，如果需要同步，则需要分布式锁。
分布式锁可以看看，zookeeper,redis；
多台服务器需要引入缓存机制，比如redis,memcache的同步锁cas。
数据库锁：悲观锁或者乐观锁


Q：CGLIB 原理？
JDK 实现动态代理需要实现类通过接口定义业务方法，对于没有接口的类，如何实现动态代理呢，这就需要CGLib了。
CGLib 创建的动态代理对象性能比JDK创建的动态代理对象的性能高不少，
但是CGLib在创建代理对象时所花费的时间却比JDK多得多，
所以对于单例的对象，因为无需频繁创建对象，用CGLib合适，反之，使用JDK方式要更为合适一些。
同时，由于CGLib由于是采用动态创建子类的方法，对于final方法，无法进行代理。


Q：动态代理实现都有哪些方式？
动态代理工具比较成熟的产品有：
	1、ASM和JAVAASSIST字节码生成方式不相上下，都很快，是CGLIB的5倍。
	2、CGLIB次之，是JDK自带的两倍。
	3、JDK自带的再次之，因JDK1.6对动态代理做了优化，如果用低版本JDK更慢，要注意的是JDK也是通过字节码生成来实现动态代理的，而不是反射。
	4、JAVAASSIST提供者动态代理接口最慢，比JDK自带的还慢。
差异原因：
	1、各方案生成的字节码不一样，
	2、像JDK和CGLIB都考虑了很多因素，以及继承或包装了自己的一些类，
	3、所以生成的字节码非常大，而我们很多时候用不上这些，
	4、而手工生成的字节码非常小，所以速度快，
	5、具体的字节码对比，后面有贴出，可自行分析。


Q：悲观锁：
	指在应用程序中显示的为数据资源加锁。
	尽管能防止丢失更新和不可重复读这类并发问题，但是它会影响并发性能，因此应该谨慎地使用。

Q：乐观锁：
	乐观锁假定当前事务操作数据资源时，不回有其他事务同时访问该数据资源，
	因此完全依靠数据库的隔离级别来自动管理锁的工作。应用程序采用版本控制手段来避免可能出现的并发问题。


Q：缓存的优势是什么，一般用在哪些方面，真能提高系统性能么
OSCache 或者 EHCache 这种是JVM缓存，它不能在多个应用或者说不能被你的集群共享，
这样就会造成内存的浪费，适用于不需要集群的小型应用。memcache 独立的缓存，
可以被集群或者多个应用共享，适用于比较大一些的应用吧。


Q：集群是怎么实现同步和负载均衡的？
负载均衡 分 硬件层 和 软件层 两种。
LVS 是 Linux Virtual Server 的简写，开源负载均衡软件，意即Linux虚拟服务器，是一个虚拟的服务器集群系统。属于四层负载均衡,
工作在tcp/ip协议栈上,通过修改网络包的ip地址和端口来转发, 由于效率比七层高,一般放在架构的前端.
七层的负载均衡有nginx, haproxy, apache等, 工作在应用层, 因此可以将HTTP请求等应用数据发送到具体的应用服务器,
如将图片请求转发到特定的服务器上,一般放在架构的后面位置,布置在应用服务器前面.



