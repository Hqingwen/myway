#include "Bhead.h"

//单向链栈，头指针指向栈顶 
/**************************************************************/
typedef struct LStack
{
	int data;
	struct LStack *next;
}LStack, *LinkStack;
/**************************************************************/

//初始化
/**************************************************************/
int InitStack(LinkStack &S)
{
	S = (LinkStack)malloc(sizeof(LStack));
	if(!S)
		return ERROR;
	S->next = NULL;
	return OK;
}
/**************************************************************/

//判空
/**************************************************************/
int StackEmpty(LinkStack S)
{
	if(S->next == NULL)
		return TRUE;
	else
		return FALSE;
}
/**************************************************************/

//进栈
/**************************************************************/
int Push(LinkStack &S, int e)
{
	LStack *p;
	p = (LStack *)malloc(sizeof(LStack));
	if(!p)
		return ERROR;
	p->next = NULL;
	p->data = e;
	//头插法
	p->next = S->next;
	S->next = p;
	return OK;
}
/**************************************************************/

//出栈
/**************************************************************/
int Pop(LinkStack &S)
{
	if(StackEmpty(S))
		return ERROR;
	LStack *p = S->next;
	S->next = p->next;
	free(p);
	return OK;
}
/**************************************************************/

//遍历
/**************************************************************/
void Treaversal(LinkStack S)
{
	if(StackEmpty(S))
	{
		cout<<"空！"<<endl<<endl;
		return ;
	}

	LStack * r = S->next;
	while(r){
		cout<<r->data<<"  ";
		r = r->next;
	}
	cout<<endl<<endl;
}
/**************************************************************/

//
/**************************************************************/

/**************************************************************/

//
/**************************************************************/

/**************************************************************/
