

transient，变量修饰符，如果用transient声明一个实例变量，当对象存储时，它的值不需要维持。换句话来说就是，用transient关键字标记的成员变量不参与序列化过程。


Volatile原理
　　Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。
　　在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一种比sychronized关键字更轻量级的同步机制。
　　当对非volatile变量进行读写的时候，每个线程先从内存拷贝变量到CPU缓存中。如果计算机有多个CPU，每个线程可能在不同的CPU上被处理，这意味着每个线程可以拷贝到不同的CPU cache中。
　　而声明变量是volatile的，JVM保证了每次读变量都从内存中读，跳过CPU cache这一步。

      Java并发编程：volatile关键字解析  参考http://www.importnew.com/18126.html


Set接口
实现类：
1、HashSet
	实际存储在HashMap map中，其中元素存储在key中，而value中存储一个静态Object
	当把某个类的对象存储在HashSet中，要override该类的equals()和hashCode()

2、TreeSet
	底层存储使用NavigableMap，实际使用TreeMap
	所有元素根据指定排序规则保持有序状态
	

Map
包含一个Entry接口
实现类：
1、HashMap implement Map
	包含一个实现Map.Entry接口的内部类Node，即为键值对
	实际存储在Node[] table中


2、TreeMap
	树的存储方式：红黑树，自平衡二叉查找树，即每个节点的值，>=左子树，<=右子树，且左右高度差不超过1
	所有Entry总是按key根据指定排序规则保持有序状态
	存取元素时要遍历





	






























